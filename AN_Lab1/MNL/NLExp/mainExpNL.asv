%METODOS NO LINEALES
%FUNCIONES Y SUS DERIVADAS
f = '2*x-2^-x';
fd1 = '2^(-x)*log(2)+2';
fd2 = '-2^(-x)*(log(2))^2';

g = 'x^3-7*x^2+14*x-2';
gd1 = '3*x^2-14*x+14';
gd2 = '6*x-14';

%TOLERANCIA
toleranciaNL = 10^-15;

%INTERVALOS
af = 0;
bf = 1; 
ag = 0; 
bg = 1;

%ITERACIONES
iteraciones = 100;

%CALCULO DE X INICIALES
xInicialF = reglaFourier(f,fd1,fd2,af,bf)
xInicialG = reglaFourier(g,gd1,gd2,ag,bg)

%ECUACIÓN 1: 2x-2^(-x)
[errorBiF,valorXBiF] = biseccion(f,af,bf,toleranciaNL,iteraciones)
[errorNeF,valorXNeF] = newton(f,fd1,xInicialF,iteraciones,toleranciaNL)
[errorSeF,valorXSeF] = secante(af,bf,iteraciones,f,toleranciaNL)
[errorRFF,valorXRFF] = regulaFalsi(af,bf,toleranciaNL,f)
[errorSCF,valorXSCF] = schroder(f,fd1,fd2,xInicialF,iteraciones,toleranciaNL)

%ECUACION 2: x^3-7x^2+14x-2 
[errorBiG,valorXBiG] = biseccion(g,ag,bg,toleranciaNL,iteraciones)
[errorNeG,valorXNeG] = newton(g,gd1,xInicialG,iteraciones,toleranciaNL)
[errorSeG,valorXSeG] = secante(ag,bg,iteraciones,g,toleranciaNL)
[errorRFG,valorXRFG] = regulaFalsi(ag,bg,toleranciaNL,g)
[errorSCG,valorXSCG] = schroder(g,gd1,gd2,xInicialG,iteraciones,toleranciaNL)

%METODO NEWTON MULTIVARIABLE (2 variables)
%FUNCIONES Y SUS DERIVADAS
f1 = 'x^2-10*x+y^2+8';
f2 = 'x*y^2+x-10*y+8';
df1x = '2*x-10+0*y';
df1y = '2*y+0*x';
df2x = 'y^2+1+0*x';
df2y = '2*x*y-10';

%TOLERANCIA
toleranciaNMV = 10^-10;

%ITERACIONES
iteraciones = 100;

%VALORES INICIALES
xInicialNMVF = 0;
yInicialNMVF = 0;

[matrix,errF1,errF2] = newtonMultivariableDos(xInicialNMVF,yInicialNMVF,iteraciones,f1,f2,df1x,df1y,df2x,df2y,toleranciaNMV)

%METODOS NEWTON MULTIVARIABLE (3 VARIABLES)
%FUNCIONES Y SUS DERIVADAS
g1 = '';
g2 = '';
g3 = '';
dg1x = '';
dg1y = '';
dg1z = '';
dg2x = '';
dg2y = '';
dg2z = '';
dg3x = '';
dg3y = '';
dg3z = '';

%VALORES INICIALES
xInicialNMVG = 0;
yInicialNMVG = 0;
zInicialNMVG = 0;

[matriz,errG1,errG2] = newtonMultivariableTres(xOld,yOld,zOld,iteracion,f1,f2,f3,df1x,df1y,df1z,df2x,df2y,df2z,df3x,df3y,df3z,tolerancia)